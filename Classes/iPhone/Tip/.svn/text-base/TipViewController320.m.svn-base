#import <MobileCoreServices/MobileCoreServices.h>

#import "AppDelegate.h"
#import "ViewItem.h"
#import "TipViewController320.h"
#import "CheckInViewController320.h"

#import "TipHeader.h"

#import "URLLabel.h"
#import "URLImageView.h"
#import "NSDate+TimeAgo.h"
#import "WebViewController.h"

#import "FSTipOps.h"

#import "UIApplication+TopView.h"
#import "UIView+ModalOverlay.h"

@implementation TipViewController320

@synthesize tipData, venueData;

#pragma mark -
#pragma mark Initialization

#pragma mark -
#pragma mark View lifecycle

- (void)viewDidLoad {
    [super viewDidLoad];
	
    self.navigationItem.title = @"Tip";
	
    tableSections = [[NSMutableArray array] retain];
    tableSectionFooters = [[NSMutableArray array] retain];
	
    TipHeader *header = [[TipHeader alloc] initWithFrame:CGRectMake(0, 0, 320, 0)];
    NSString *name = [[self.venueData objectForKey:@"venue"] objectForKey:@"name"];
    if (name == nil) name = @"No name";
    [self.tipData setObject:[NSDictionary dictionaryWithObject:name forKey:@"name"] forKey:@"venue"];
    header.tipData = self.tipData; 
    self.tableView.tableHeaderView = header;
    [header release];
    
    UIBarButtonItem *item = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(addTipButtonTapped:)];
	self.navigationItem.rightBarButtonItem = item;
	[item release];
    
    [self loadTableSections];
}

- (void) loadTableSections
{
    
    [tableSections removeAllObjects];
    [tableSectionFooters removeAllObjects];
	
	UITableViewCell *cell;
	
	// section 1
	
	NSMutableArray *section0 = [[NSMutableArray array] retain];
	tipCell = [[SingleTipTableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];
    tipCell.delegate = self;
    tipCell.tipData = self.tipData;
	[section0 addObject:tipCell];
	//[cell release]; cell = nil;
	[tableSections addObject:section0];
    
    NSNumber *timeValueNumber = (NSNumber*)[tipData objectForKey:@"created_time_ago_val"]; // 2.45
    TimeUnitType timeUnit = [(NSNumber*)[tipData objectForKey:@"created_time_ago_unit"] intValue]; //"minutes"
    NSString *timeString = [tipData objectForKey:@"created_time_ago_string"]; //"2 1/2"
    NSString *timeUnitString = [NSDate timeUnit:timeUnit withValue:[timeValueNumber floatValue]];       
    
	[tableSectionFooters addObject:[NSString stringWithFormat:@"posted %@ %@ ago", timeString, timeUnitString]];
	[section0 release];
	
	//section 2
    
    NSMutableArray *section2 = [[NSMutableArray array] retain];
    
    //cell 1
    
    if ([[self.tipData objectForKey:@"status"] isEqual:@"done"]) {
        
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];
        cell.textLabel.text = @"You've done this";
        //cell.selectionStyle = UITableViewCellSelectionStyleNone;
        cell.textLabel.textColor = [UIColor grayColor];//HEXCOLOR(0x3A4D85ff);
        cell.textLabel.textAlignment = UITextAlignmentCenter;
        
        [section2 addObject:cell];
        [cell release]; cell = nil;
        [tableSections addObject:section2];
        [tableSectionFooters addObject:@""];
                
    } else {
    
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];
        UIView *bg = [[UIView alloc] initWithFrame:CGRectNull];
        bg.backgroundColor = [UIColor clearColor];
        cell.backgroundView = bg;
        cell.selectionStyle = UITableViewCellSelectionStyleNone;
        [bg release];
        
        if ([[self.tipData objectForKey:@"status"] isEqual:@"todo"]) {
            
            markTodoButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            markTodoButton.frame = CGRectMake(10, 0, 145, 44);
            [markTodoButton setTitle:@"Remove To Do" forState:UIControlStateNormal];
            [markTodoButton setTitleColor:HEXCOLOR(0x3A4D85ff) forState:UIControlStateNormal];
            [markTodoButton addTarget:self action:@selector(markRemoveTodoButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
            [cell addSubview:markTodoButton];
            
        } else {
            
            markTodoButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
            markTodoButton.frame = CGRectMake(10, 0, 145, 44);
            [markTodoButton setTitle:@"Save as a To Do" forState:UIControlStateNormal];
            [markTodoButton setTitleColor:HEXCOLOR(0x3A4D85ff) forState:UIControlStateNormal];
            [markTodoButton addTarget:self action:@selector(markTodoButtonTapped:) forControlEvents:UIControlEventTouchUpInside];
            [cell addSubview:markTodoButton];
            
        }
        
        markDone = [UIButton buttonWithType:UIButtonTypeRoundedRect];
        markDone.frame = CGRectMake(165, 0, 145, 44);
        [markDone setTitle:@"I've done this" forState:UIControlStateNormal];
        [markDone setTitleColor:HEXCOLOR(0x3A4D85ff) forState:UIControlStateNormal];
        [markDone addTarget:self action:@selector(markDoneTapped:) forControlEvents:UIControlEventTouchUpInside];
        [cell addSubview:markDone];
        
        [section2 addObject:cell];
        [cell release]; cell = nil;
        [tableSections addObject:section2];
        [tableSectionFooters addObject:@""];
        
    }
    
    [section2 release];

}

- (void) viewWillAppear:(BOOL)animated 
{
    [[FSTipOps sharedInstance] addObserver:self
                                      forKeyPath:@"success"
                                         options:NSKeyValueObservingOptionNew
                                         context:NULL];
    
    [[FSTipOps sharedInstance] addObserver:self
                                forKeyPath:@"error"
                                   options:NSKeyValueObservingOptionNew
                                   context:NULL];    

    [super viewWillAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated {
    
    [[FSTipOps sharedInstance] removeObserver:self forKeyPath:@"success"];
    [[FSTipOps sharedInstance] removeObserver:self forKeyPath:@"error"];
    
    [super viewWillDisappear:animated];
}

#pragma mark -
#pragma mark Table view data source

#pragma mark UITableView

- (NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section
{

    if (![[tableSectionFooters objectAtIndex:section] isEqual:@""]) {
        
        return [tableSectionFooters objectAtIndex:section];
    }
	
    return nil;
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
	
	if (indexPath.section == 0) {
		return [tipCell sizeThatFits:CGSizeZero].height;
	} else {
		return 44;
	}
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    // Return the number of sections.
    return [tableSections count];
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    // Return the number of rows in the section.
    return [(NSArray*)[tableSections objectAtIndex:section] count];
}


// Customize the appearance of table view cells.
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    return (UITableViewCell*)[(NSArray*)[tableSections objectAtIndex:indexPath.section] objectAtIndex:indexPath.row];
}

#pragma mark -
#pragma mark Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath 
{
    
    if (indexPath.row == 0 && indexPath.section == 1) {
        
        tipOpActionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self 
                                                cancelButtonTitle:@"Cancel" 
                                           destructiveButtonTitle:@"Unmark this tip"
                                                otherButtonTitles:nil];
    
        [tipOpActionSheet showInView:((AppDelegate*)[UIApplication sharedApplication].delegate).window];
    }
}

#pragma mark -
#pragma mark Handlers

- (void)addTipButtonTapped:(id)sender
{
    
    sharingActionSheet = [[UIActionSheet alloc] initWithTitle:nil delegate:self 
                                                    cancelButtonTitle:@"Cancel" 
                                               destructiveButtonTitle:nil
                                                    otherButtonTitles:@"Add a new tip here", @"Open Tip in Safari", @"Copy Tip Link", nil ];
    
    [sharingActionSheet showInView:((AppDelegate*)[UIApplication sharedApplication].delegate).window]; 
    
}

- (void) markTodoButtonTapped:(id)sender
{
    _NSLog(@"markTodoButtonTapped");
	[[FSTipOps sharedInstance] marktodo:[[self.tipData objectForKey:@"id"] intValue]];
    [[[UIApplication sharedApplication] topView] showModalOverlayWithMessage:@"marking as todo..." style:ModalOverlayStyleActivity];
    
    tipOperation = @"todo";
}

- (void) markRemoveTodoButtonTapped:(id)sender
{
    _NSLog(@"markRemoveTodoButtonTapped");
	[[FSTipOps sharedInstance] unmark:[[self.tipData objectForKey:@"id"] intValue]];
    [[[UIApplication sharedApplication] topView] showModalOverlayWithMessage:@"removing todo..." style:ModalOverlayStyleActivity];
    
    tipOperation = @"remove";
}

- (void) markDoneTapped:(id)sender
{
	_NSLog(@"markDoneTapped");
    [[FSTipOps sharedInstance] markdone:[[self.tipData objectForKey:@"id"] intValue]];
    [[[UIApplication sharedApplication] topView] showModalOverlayWithMessage:@"marking as done..." style:ModalOverlayStyleActivity];
    
    tipOperation = @"done";
}

#pragma mark -
#pragma mark ActionSheet

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex
{
    
    if (actionSheet == sharingActionSheet) {
        
        [self.tableView deselectRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:1] animated:YES];
        
        NSString *url = [NSString stringWithFormat:@"http://foursquare.com/item/%@", [tipData objectForKey:@"id"]]; 
        
        if (actionSheet.cancelButtonIndex == buttonIndex) {
            
        } else if (actionSheet.firstOtherButtonIndex == buttonIndex) {
            
            CheckInViewController320 *detailViewController = [[CheckInViewController320 alloc] initWithStyle:UITableViewStyleGrouped checkinStyle:PostStyleTip];
            detailViewController.info = venueData;
            UINavigationController *navController = [[UINavigationController alloc] initWithRootViewController:detailViewController];
            detailViewController.parentNavigationController = self.navigationController;
            [self.navigationController presentModalViewController:navController animated:YES];
            [detailViewController release];
            [navController release];
            
        } else if (actionSheet.firstOtherButtonIndex + 1 == buttonIndex) {
            
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];
            
        } else if (actionSheet.firstOtherButtonIndex + 2 == buttonIndex) {
            
            UIPasteboard *pasteboard = [UIPasteboard generalPasteboard];
            NSDictionary *item = [NSDictionary dictionaryWithObjectsAndKeys:
                                  url, @"public.utf8-plain-text", [NSURL URLWithString:url],
                                  (NSString *)kUTTypeURL,
                                  nil];
            pasteboard.items = [NSArray arrayWithObject:item];
        }
        
        [actionSheet release];
        
    } else {
        
        [self.tableView deselectRowAtIndexPath:[NSIndexPath indexPathForRow:0 inSection:1] animated:YES];
        
        if (actionSheet.destructiveButtonIndex == buttonIndex) {
            
            [self performSelector:@selector(performRemove) withObject:nil afterDelay:.25];
            
            tipOperation = @"remove";
        }
        [actionSheet release];
    }
}

- (void)performRemove
{
    [[FSTipOps sharedInstance] unmark:[[self.tipData objectForKey:@"id"] intValue]];
    [[[UIApplication sharedApplication] topView] showModalOverlayWithMessage:@"removing marked tip..." style:ModalOverlayStyleActivity];
}

#pragma mark -
#pragma mark BubbleView Delegate

-(void)viewItemTapped:(id)sender
{
    [ViewItem handleTap:sender controller:self];
}

#pragma mark -
#pragma mark Memory management

- (void)didReceiveMemoryWarning {
    // Releases the view if it doesn't have a superview.
    [super didReceiveMemoryWarning];
    
    // Relinquish ownership any cached data, images, etc that aren't in use.
}

- (void)viewDidUnload {
    // Relinquish ownership of anything that can be recreated in viewDidLoad or on demand.
    // For example: self.myOutlet = nil;
}

#pragma mark -
#pragma mark KVO

- (void)observeValueForKeyPath:(NSString *)keyPath
                      ofObject:(id)object
                        change:(NSDictionary *)change
                       context:(void *)context
{
    
    if ([keyPath isEqual:@"success"]) {
        
        BOOL success = [[change objectForKey:NSKeyValueChangeNewKey] boolValue];

        if (success) {
            
            if ([tipOperation isEqual:@"todo"] || [tipOperation isEqual:@"done"]) {
                [self.tipData setObject:tipOperation forKey:@"status"];
            } else if ([tipOperation isEqual:@"remove"]) {
                [self.tipData removeObjectForKey:@"status"];
            }
        
            [[[UIApplication sharedApplication] topView] hideModalOverlayWithSuccessMessage:@"OK" animation:YES];
            
            [self loadTableSections];
            [self.tableView reloadData];
            
        }
        
    } else if ([object class] == [FSTipOps class] && [keyPath isEqual:@"error"]) {
        
        NSString *errStr = nil;
        
        NSError *_error = [change objectForKey:NSKeyValueChangeNewKey];
        
        if ([_error userInfo] != nil) {
            
            errStr = [NSString stringWithFormat:@"%@ %@", [_error localizedDescription], [[_error userInfo] objectForKey:NSErrorFailingURLStringKey]];
            
        } else {
            
            errStr = [_error localizedDescription];
        }
        
        [[[UIApplication sharedApplication] topView] hideModalOverlayWithErrorMessage:errStr animation:YES];
    }
}

- (void)dealloc 
{
    
    [tableSections release];
    [tableSectionFooters release];
    
//    [markTodoButton release];
//    [markDone release];
    
    [tipData release];
    [venueData release];
    
    [super dealloc];
}


@end

